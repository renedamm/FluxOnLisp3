
compilation_unit -> definition*

definition -> attributes? modifier* definition_keyword identifier type_parameters? value_parameters? ( ":" type? )? clause* definition_body

definition_keyword -> "type"
		    | "function"
		    | "object"
		    | "method"
		    | "field"
		    | "module"
		    | "features"
		    | "local"

definition_body -> ";"
		 | "=" expression ";"
		 | "{" statement* "}"

statement -> ";"
	   | "{" statement* "}"
	   | "loop" ( "(" ... ")" )? statement
	   | "continue" ";"
	   | "break" ";"
	   | "throw" expression ";"
	   | "return" expression ";"
	   | "yield" expression ";"
	   | "if" "(" expression ")" statement ( "else" statement )?
	   | "switch" "(" expression ")" "{" ( "case" expression,"," ":" statement )* "}"
	   | "try" ( "(" expression ")" )? statement ( "finally" statement )?
	   | definition
	   | expression ";"

expression -> "(" expression ")"
	    | identifier type_arguments value_arguments
	    | expression "." identifier
	    | expression binary_operator expression
	    | unary_prefix_operator expression
	    | expression unary_postfix_operator
	    | "object" ":" type ( "{" ... "}" )?
	    | literal

literal -> 

binary_operator -> "&&"
		 | "||"
		 | "+"
		 | "-"
		 | "/"
		 | "*"
		 | "%"

unary_prefix_operator -> "++"
		       | "--"
		       | "!"
		       | "-"

unary_postfix_operator -> "++"
		        | "--"

type_parameters -> "<" {type_parameter:::","} ">"

type_parameter -> type ( "=" type )?
	        | modifier* identifier ":" type ( "=" type )?

value_parameters -> "(" {value_parameter:::","} ")"

value_parameter ->

type_arguments -> "<" {type:::","} ">"

value_arguments -> "(" {expression:::","} ")"

type -> modifier* identifier type_arguments?
      | "(" {type:::","} ")" // May be a tuple type or just a parenthesized type expression.
      | type "->" type
      | type "&" type
      | type "|" type

(A -> B) -> C

identifier -> ( "::" )? {name:::"::"}

name -> '[[:APHABETIC]_][[:APHANUMERIC:]_]*(!)?'

modifier -> "abstract"
	  | "immutable"
	  | "mutable"
	  | "extend"
	  | "instantiable"
	  | "import"
	  | "include"
	  | "final"
	  | "sealed"
	  | "iterator"
	  | "before"
	  | "after"
	  | "around"
	  | "default"
	  | "read"
	  | "write"
	  | "private"

clause -> "when" expression
        | "requires" expression
	| "ensures" expression
	| "invariant" expression

attributes -> ( "[" attribute* "]" )*

attribute -> identifier ( "(" value_arguments ")" )?
