
(in-package :fl)

;;;;============================================================================
;;;;    Classes.
;;;;============================================================================

;; -----------------------------------------------------------------------------
(defclass fl-object ()
  ((type
    :reader get-type
    :initarg :type)
   (slots
    :initform (make-hash-table)
    :reader get-slots)))

;;;;============================================================================
;;;;    Functions.
;;;;============================================================================

;; -----------------------------------------------------------------------------
(defun make-object (type)
  (make-instance 'fl-object
                 :type type))

;; -----------------------------------------------------------------------------
(defun typeof (value)
  (cond
    ((typep value 'fl-object) (get-type value))
    (t (not-implemented "get type of value"))))

;; -----------------------------------------------------------------------------
(defsuite test-objects ()
  ())

;;;;============================================================================
;;;;    Globals.
;;;;============================================================================

;; -----------------------------------------------------------------------------
(defparameter *singletons* nil)

;; -----------------------------------------------------------------------------
;; Object representing System::Optional::Nothing.
(defparameter *object-nothing* (make-object *nothing-type*))

